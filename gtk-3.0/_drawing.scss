// Drawing mixins

// generic drawing of more complex things

// entries
@function entry_focus_border($fc:$selected_bg_color) {
  @if $variant == 'light' { @return $fc; }
  @else { @return if($fc==$selected_bg_color, $selected_borders_color, darken($fc, 35%)); }
}

@function entry_focus_shadow($fc:$selected_bg_color) { @return inset 0 0 0 1px $fc; }

@mixin entry($t, $fc:$selected_bg_color, $edge: none) {
//
// Entries drawing function
//
// $t: entry type
// $fc: focus color
// $edge: set to none to not draw the bottom edge or specify a color to not
//        use the default one
//
// possible $t values:
// normal, focus, insensitive, backdrop, backdrop-insensitive, osd, osd-focus, osd-backdrop;
//

  @if $t==normal {
    color: $text_color;
    border-color: $borders_color;
    background-color: $base_color;
    box-shadow: inset 0 1px $shadow_color;
  }
  @if $t==focus {
    border-color: entry_focus_border($fc);
    box-shadow: entry_focus_shadow($fc);
  }
  @if $t==insensitive {
    color: $insensitive_fg_color;
    border-color: $borders_color;
    background-color: $insensitive_bg_color;
    box-shadow: none;
  }
  @if $t==backdrop {
    color: $backdrop_text_color;
    border-color: $backdrop_borders_color;
    background-color: $backdrop_base_color;
    box-shadow: none;
  }
  @if $t==backdrop-insensitive {
    color: $backdrop_insensitive_color;
    border-color: $backdrop_borders_color;
    background-color: $insensitive_bg_color;
    box-shadow: none;
  }
  @if $t==osd {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
  }
  @if $t==osd-focus {
    color: $osd_text_color;
    border-color: $selected_bg_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: entry_focus_shadow($fc);
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
  }
  @if $t==osd-insensitive {
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-color: $osd_insensitive_bg_color;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
  @if $t==osd-backdrop {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

// buttons

@function _border_color($c, $darker: false) {
  @if $darker == true { @return darken($c, 30%); }
  @else { @return darken($c, 20%); }
}

@function _text_shadow_color($tc: $fg_color, $bg: $bg_color) {
//
// calculate the color of text shadows
//
// $tc is the text color
// $bg is the background color
//
  @if lightness($tc)<50% { @return rgba(white, 0.8); }
  @else { @return rgba(black, 0.4); }
}

@function _button_hilight_color($c) {
//
// calculate the right top hilight color for buttons
//
// $c: base color;
//
  @if lightness($c)>95% { @return white; }
  @else if lightness($c)>90% { @return rgba(white, 0.4); }
  @else if lightness($c)>80% { @return rgba(white, 0.3); }
  @else if lightness($c)>50% { @return rgba(white, 0.2); }
  @else if lightness($c)>40% { @return rgba(white, 0.1); }
  @else { @return rgba(white, 0.05); }
}

@mixin _button_text_shadow($tc:$fg_color, $bg:$bg_color) {
//
// helper function for the text emboss effect
//
// $tc is the optional text color, not the shadow color
//
// TODO: this functions needs a way to deal with special cases
//

  $_shadow: _text_shadow_color($tc, $bg);

  @if lightness($tc)<50% {
    text-shadow: 0 1px $_shadow;
    -gtk-icon-shadow: 0 1px $_shadow;
  }
  @else {
    text-shadow: 0 -1px $_shadow;
    -gtk-icon-shadow: 0 -1px $_shadow;
  }
}

@mixin button($t, $c:$bg_color, $tc:$fg_color, $edge: none) {
//
// Button drawing function
//
// $t:    button type,
// $c:    base button color for colored* types
// $tc:   optional text color for colored* types
// $edge: set to none to not draw the bottom edge or specify a color to not
//        use the default one
//
// possible $t values:
// normal, hover, active, insensitive, insensitive-active,
// backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
// osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
//

  $_hilight_color: _button_hilight_color($c);

  @if $t==normal {
    color: $tc;
    border-color: if($c != $bg_color, _border_color($c), $borders_color);
    background-color: lighten($c, 2%);
    box-shadow: inset 0 1px $_hilight_color, inset 0 -1px $shadow_color;

    @include _button_text_shadow($tc, $c);
  }

  @else if $t==hover {
    color: $tc;
    border-color: if($c != $bg_color, _border_color($c), $borders_color);
    background-color: lighten($c, 6%);
    box-shadow: inset 0 1px $_hilight_color, inset 0 -1px $shadow_color;

    @include _button_text_shadow($tc, $c);
  }

  @else if $t==active {
    color: $tc;
    border-color: if($c != $bg_color, _border_color($c), $borders_color);
    background-color: darken($c, 6%);
    box-shadow: inset 0 1px $shadow_color;

    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  @else if $t==insensitive {
    label, & { color: if($tc != $fg_color, mix($tc, $bg_color, 50%), $insensitive_fg_color); }

    border-color: $borders_color;
    background-color: lighten($c, 2%);
    box-shadow: none;

    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  @else if $t==insensitive-active {
    label, & { color: if($c != $bg_color, mix($tc, $c, 60%), $insensitive_fg_color); }

    border-color: $borders_color;
    background-color: darken($c, 6%);
    box-shadow: none;
  }

  @else if $t==backdrop {
    label, & { color: if($tc != $fg_color, mix($tc, $c, 80%), $backdrop_fg_color); }

    border-color: if($c != $bg_color, $c, $backdrop_borders_color);
    box-shadow: none;

    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  @else if $t==backdrop-active {
    label, & { color: if($tc != $fg_color, mix($tc, $c, 80%), $backdrop_fg_color); }

    border-color: if($c != $bg_color, $c, $backdrop_borders_color);
    box-shadow: none;
  }

  @else if $t==backdrop-insensitive {
    label, & { color: if($c != $bg_color, mix($tc, $c, 35%), $backdrop_insensitive_color); }

    border-color: if($c != $bg_color, $c, $backdrop_borders_color);
    box-shadow: none;

    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  @else if $t==backdrop-insensitive-active {
    label { color: if($c != $bg_color, mix($tc, $c, 35%), $backdrop_insensitive_color); }

    border-color: if($c != $bg_color, $c, $backdrop_borders_color);
    box-shadow: none;
  }

  @else if $t==undecorated {
  //
  // reset
  //
    color: if($c != $bg_color, $tc, $alt_fg_color);
    border-color: transparent;
    background-color: transparent;
    box-shadow: none;

    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  @else if $t==undecorated-insensitive {
  //
  // reset
  //
    color: if($c != $bg_color, mix($tc, $bg_color, 40%), $insensitive_alt_fg_color);
    border-color: transparent;
    background-color: transparent;
    box-shadow: none;

    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  @else if $t==undecorated-backdrop {
  //
  // reset
  //
    color: if($c != $bg_color, mix($tc, $backdrop_bg_color, 70%), $backdrop_alt_fg_color);
    border-color: transparent;
    background-color: transparent;
    box-shadow: none;

    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

@mixin headerbar_fill($c:$headerbar_color, $hc:$top_hilight, $ov: none) {
//
// headerbar fill
//
// $c:  base color
// $hc: top highlight color
// $ov: a background layer for background shorthand (hence no commas!)
//
  background-color: $c;
  box-shadow: inset 0 1px _button_hilight_color($c), inset 0 -1px $shadow_color;
}

@mixin overshoot($p, $t:normal, $c:$fg_color) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_small_gradient_length: 5%;
  $_big_gradient_length: 100%;

  $_position: center top;
  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==bottom {
    $_position: center bottom;
    $_linear_gradient_direction: to top;
  }

  @else if $p==right {
    $_position: right center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  @else if $p==left {
    $_position: left center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $c;
  $_big_gradient_color: $c;

  @if $c==$fg_color {
    $_small_gradient_color: darken($borders_color, 10%);
    $_big_gradient_color: $fg_color;

    @if $t==backdrop { $_small_gradient_color: $backdrop_borders_color; }
  }

  $_small_gradient: -gtk-gradient(radial,
                                  $_position, 0,
                                  $_position, 0.5,
                                  to($_small_gradient_color),
                                  to(transparentize($_small_gradient_color, 1)));

  $_big_gradient: -gtk-gradient(radial,
                                $_position, 0,
                                $_position, 0.6,
                                from(transparentize($_big_gradient_color, 0.93)),
                                to(transparentize($_big_gradient_color, 1)));

  @if $t==normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }

  @else if $t==backdrop {
    background-image: $_small_gradient;
    background-size: $_small_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $_position;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}

@mixin undershoot($p) {
//
// undershoot
//
// $p: position
//
// possible $p values:
// top, bottom, right, left
//

  $_undershoot_color_dark: transparentize(black, 0.8);
  $_undershoot_color_light: transparentize(white, 0.8);

  $_gradient_dir: left;
  $_dash_bg_size: 10px 1px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: center $p;

  background-color: transparent; // shouldn't be needed, but better to be sure;

  @if ($p == left) or ($p == right) {
    $_gradient_dir: top;
    $_dash_bg_size: 1px 10px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $p center;
  }

  background-image: linear-gradient(to $_gradient_dir, // this is the dashed line
                                    $_undershoot_color_light 50%,
                                    $_undershoot_color_dark 50%);

  padding-#{$p}: 1px;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
  border: none;
  box-shadow: none;
}
